import React, { useState, useEffect } from 'react';
import { Mic, MicOff, Search, MapPin, Star, Calendar, Upload, Clock, Pill, Phone, Video, CheckCircle, AlertCircle, MessageCircle, Navigation, Shield, Filter, X, Send } from 'lucide-react';

export default function DoctorConsultation() {
  const [selectedLanguage, setSelectedLanguage] = useState('english');
  const [searchQuery, setSearchQuery] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [selectedDoctor, setSelectedDoctor] = useState(null);
  const [prescriptionFile, setPrescriptionFile] = useState(null);
  const [parsedMedicine, setParsedMedicine] = useState(null);
  const [activeTab, setActiveTab] = useState('search');
  const [userLocation, setUserLocation] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState({ available: false, maxDistance: 10, minRating: 0, insurance: false });
  const [showChat, setShowChat] = useState(false);
  const [chatMessages, setChatMessages] = useState([]);
  const [chatInput, setChatInput] = useState('');

  const languages = {
    english: { name: 'English', code: 'en' },
    hindi: { name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', code: 'hi' },
    assamese: { name: '‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ', code: 'as' },
    bengali: { name: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', code: 'bn' }
  };

  const translations = {
    english: {
      title: 'Find Your Doctor',
      searchPlaceholder: 'Describe your health problem...',
      voiceSearch: 'Tap to speak',
      nearbyDoctors: 'Doctors Near You',
      experience: 'Experience',
      rating: 'Rating',
      bookNow: 'Book',
      uploadPrescription: 'Upload Prescription',
      medicineTiming: 'Medicine Schedule',
      morning: 'Morning',
      afternoon: 'Afternoon',
      evening: 'Evening',
      night: 'Night',
      afterMeal: 'After Meal',
      noDoctors: 'No doctors found.',
      uploadSuccess: 'Uploaded!',
      filters: 'Filters',
      availableNow: 'Available',
      acceptsInsurance: 'Insurance',
      applyFilters: 'Apply',
      clearFilters: 'Clear',
      cancel: 'Cancel',
      consultationFee: 'Fee',
      chatNow: 'Chat',
      typeMessage: 'Type message...',
      send: 'Send'
    },
    hindi: {
      title: '‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç',
      searchPlaceholder: '‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç...',
      voiceSearch: '‡§¨‡•ã‡§≤‡•á‡§Ç',
      nearbyDoctors: '‡§°‡•â‡§ï‡•ç‡§ü‡§∞',
      experience: '‡§Ö‡§®‡•Å‡§≠‡§µ',
      rating: '‡§∞‡•á‡§ü‡§ø‡§Ç‡§ó',
      bookNow: '‡§¨‡•Å‡§ï',
      uploadPrescription: '‡§Ö‡§™‡§≤‡•ã‡§°',
      medicineTiming: '‡§¶‡§µ‡§æ ‡§∏‡§Æ‡§Ø',
      morning: '‡§∏‡•Å‡§¨‡§π',
      afternoon: '‡§¶‡•ã‡§™‡§π‡§∞',
      evening: '‡§∂‡§æ‡§Æ',
      night: '‡§∞‡§æ‡§§',
      afterMeal: '‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶',
      noDoctors: '‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á',
      uploadSuccess: '‡§π‡•ã ‡§ó‡§Ø‡§æ!',
      filters: '‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞',
      availableNow: '‡§â‡§™‡§≤‡§¨‡•ç‡§ß',
      acceptsInsurance: '‡§¨‡•Ä‡§Æ‡§æ',
      applyFilters: '‡§≤‡§æ‡§ó‡•Ç',
      clearFilters: '‡§∏‡§æ‡§´‡§º',
      cancel: '‡§∞‡§¶‡•ç‡§¶',
      consultationFee: '‡§∂‡•Å‡§≤‡•ç‡§ï',
      chatNow: '‡§ö‡•à‡§ü',
      typeMessage: '‡§∏‡§Ç‡§¶‡•á‡§∂...',
      send: '‡§≠‡•á‡§ú‡•á‡§Ç'
    },
    assamese: {
      title: '‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï',
      searchPlaceholder: '‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ...',
      voiceSearch: '‡¶ï‡¶•‡¶æ ‡¶ï‡¶ì‡¶ï',
      nearbyDoctors: '‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï',
      experience: '‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ',
      rating: '‡ß∞‡ßá‡¶ü‡¶ø‡¶Ç',
      bookNow: '‡¶¨‡ßÅ‡¶ï',
      uploadPrescription: '‡¶Ü‡¶™‡¶≤‡¶°',
      medicineTiming: '‡¶∏‡¶Æ‡¶Ø‡¶º',
      morning: '‡ß∞‡¶æ‡¶§‡¶ø‡¶™‡ßÅ‡ß±‡¶æ',
      afternoon: '‡¶¶‡ßÅ‡¶™‡ß∞',
      evening: '‡¶∏‡¶®‡ßç‡¶ß‡¶ø‡¶Ø‡¶º‡¶æ',
      night: '‡¶®‡¶ø‡¶∂‡¶æ',
      afterMeal: '‡¶™‡¶ø‡¶õ‡¶§',
      noDoctors: '‡¶®‡¶æ‡¶á',
      uploadSuccess: '‡¶π‡ßà‡¶õ‡ßá!',
      filters: '‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡ß∞',
      availableNow: '‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß',
      acceptsInsurance: '‡¶¨‡ßÄ‡¶Æ‡¶æ',
      applyFilters: '‡¶ï‡ß∞‡¶ï',
      clearFilters: '‡¶Æ‡¶ö‡¶ï',
      cancel: '‡¶¨‡¶æ‡¶§‡¶ø‡¶≤',
      consultationFee: '‡¶Æ‡¶æ‡¶ö‡ßÅ‡¶≤',
      chatNow: '‡¶ö‡ßá‡¶ü',
      typeMessage: '‡¶¨‡¶æ‡ß∞‡ßç‡¶§‡¶æ...',
      send: '‡¶™‡ßç‡ß∞‡ßá‡ß∞‡¶£'
    },
    bengali: {
      title: '‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞',
      searchPlaceholder: '‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ...',
      voiceSearch: '‡¶¨‡¶≤‡ßÅ‡¶®',
      nearbyDoctors: '‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞',
      experience: '‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ',
      rating: '‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç',
      bookNow: '‡¶¨‡ßÅ‡¶ï',
      uploadPrescription: '‡¶Ü‡¶™‡¶≤‡ßã‡¶°',
      medicineTiming: '‡¶∏‡¶Æ‡¶Ø‡¶º',
      morning: '‡¶∏‡¶ï‡¶æ‡¶≤',
      afternoon: '‡¶¶‡ßÅ‡¶™‡ßÅ‡¶∞',
      evening: '‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ',
      night: '‡¶∞‡¶æ‡¶§',
      afterMeal: '‡¶™‡¶∞‡ßá',
      noDoctors: '‡¶®‡ßá‡¶á',
      uploadSuccess: '‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!',
      filters: '‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞',
      availableNow: '‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß',
      acceptsInsurance: '‡¶¨‡ßÄ‡¶Æ‡¶æ',
      applyFilters: '‡¶ï‡¶∞‡ßÅ‡¶®',
      clearFilters: '‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®',
      cancel: '‡¶¨‡¶æ‡¶§‡¶ø‡¶≤',
      consultationFee: '‡¶´‡¶ø',
      chatNow: '‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü',
      typeMessage: '‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ...',
      send: '‡¶™‡¶æ‡¶†‡¶æ‡¶®'
    }
  };

  const [doctors] = useState([
    { id: 1, name: 'Dr. Rajesh Kumar', specialization: 'General Physician', experience: '15 years', rating: 4.8, reviewCount: 342, distance: 2.5, available: true, fee: 500, insurance: true, symptoms: ['fever', 'cold', 'cough', 'headache'] },
    { id: 2, name: 'Dr. Priya Sharma', specialization: 'Pediatrician', experience: '10 years', rating: 4.9, reviewCount: 521, distance: 3.2, available: true, fee: 600, insurance: true, symptoms: ['child', 'baby', 'vaccination'] },
    { id: 3, name: 'Dr. Anil Bora', specialization: 'Cardiologist', experience: '20 years', rating: 4.7, reviewCount: 287, distance: 5.0, available: false, fee: 1200, insurance: true, symptoms: ['chest pain', 'heart', 'blood pressure'] },
    { id: 4, name: 'Dr. Sunita Das', specialization: 'Dermatologist', experience: '12 years', rating: 4.6, reviewCount: 198, distance: 1.8, available: true, fee: 700, insurance: false, symptoms: ['skin', 'rash', 'allergy'] }
  ]);

  const [medicineDatabase] = useState([
    { name: 'Paracetamol 500mg', timing: ['morning', 'evening'], mealRelation: 'afterMeal', duration: '5 days' },
    { name: 'Amoxicillin 250mg', timing: ['morning', 'afternoon', 'night'], mealRelation: 'afterMeal', duration: '7 days' },
    { name: 'Vitamin D3', timing: ['morning'], mealRelation: 'afterMeal', duration: '30 days' }
  ]);

  const t = translations[selectedLanguage];

  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition((pos) => {
        setUserLocation({ lat: pos.coords.latitude, lng: pos.coords.longitude });
      });
    }
  }, []);

  const filterDoctors = (query) => {
    let filtered = doctors;
    if (query) {
      const lowerQuery = query.toLowerCase();
      filtered = filtered.filter(d => d.symptoms.some(s => s.includes(lowerQuery)) || d.specialization.toLowerCase().includes(lowerQuery));
    }
    if (filters.available) filtered = filtered.filter(d => d.available);
    if (filters.maxDistance) filtered = filtered.filter(d => d.distance <= filters.maxDistance);
    if (filters.minRating) filtered = filtered.filter(d => d.rating >= filters.minRating);
    if (filters.insurance) filtered = filtered.filter(d => d.insurance);
    return filtered.sort((a, b) => a.distance - b.distance);
  };

  const startVoiceRecognition = () => {
    setIsListening(true);
    if ('webkitSpeechRecognition' in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.lang = languages[selectedLanguage].code + '-IN';
      recognition.onresult = (e) => {
        setSearchQuery(e.results[0][0].transcript);
        setIsListening(false);
      };
      recognition.onerror = () => setIsListening(false);
      recognition.start();
    } else {
      alert('Voice recognition not supported. Use Chrome.');
      setIsListening(false);
    }
  };

  const handlePrescriptionUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setPrescriptionFile(file);
      setTimeout(() => setParsedMedicine({ medicines: medicineDatabase }), 1500);
    }
  };

  const handleChatSend = () => {
    if (chatInput.trim()) {
      setChatMessages([...chatMessages, { type: 'user', text: chatInput }]);
      setChatInput('');
      setTimeout(() => {
        setChatMessages(prev => [...prev, { type: 'doctor', text: 'Thank you. I will respond shortly.' }]);
      }, 1000);
    }
  };

  const filteredDoctors = filterDoctors(searchQuery);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 pb-8">
      <header className="bg-white shadow-md sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold text-blue-600">üè• HealthCare Pro</h1>
            <div className="flex items-center gap-3">
              <button className="flex items-center gap-2 px-3 py-2 bg-green-100 text-green-700 rounded-lg">
                <Navigation className="w-4 h-4" />
                {userLocation && <CheckCircle className="w-4 h-4" />}
              </button>
              <select value={selectedLanguage} onChange={(e) => setSelectedLanguage(e.target.value)} className="px-4 py-2 border-2 border-blue-300 rounded-lg bg-white font-medium">
                {Object.entries(languages).map(([key, lang]) => <option key={key} value={key}>{lang.name}</option>)}
              </select>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <h2 className="text-4xl font-bold text-gray-800 mb-2">{t.title}</h2>
          <p className="text-gray-600 text-lg">24/7 Medical Support</p>
        </div>

        <div className="flex justify-center gap-4 mb-8">
          <button onClick={() => setActiveTab('search')} className={`px-6 py-3 rounded-lg font-semibold ${activeTab === 'search' ? 'bg-blue-600 text-white shadow-lg' : 'bg-white text-gray-600'}`}>
            <Search className="inline w-5 h-5 mr-2" />Find Doctor
          </button>
          <button onClick={() => setActiveTab('prescription')} className={`px-6 py-3 rounded-lg font-semibold ${activeTab === 'prescription' ? 'bg-blue-600 text-white shadow-lg' : 'bg-white text-gray-600'}`}>
            <Upload className="inline w-5 h-5 mr-2" />{t.uploadPrescription}
          </button>
        </div>

        {activeTab === 'search' ? (
          <>
            <div className="max-w-3xl mx-auto mb-8">
              <div className="bg-white rounded-2xl shadow-xl p-6">
                <div className="flex items-center gap-3 mb-4">
                  <Search className="w-6 h-6 text-gray-400" />
                  <input type="text" value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} placeholder={t.searchPlaceholder} className="flex-1 text-lg outline-none" />
                  <button onClick={() => setShowFilters(!showFilters)} className="p-3 rounded-full bg-gray-100 hover:bg-gray-200">
                    <Filter className="w-6 h-6 text-gray-600" />
                  </button>
                  <button onClick={startVoiceRecognition} className={`p-3 rounded-full ${isListening ? 'bg-red-500 text-white animate-pulse' : 'bg-blue-500 text-white'}`}>
                    {isListening ? <MicOff className="w-6 h-6" /> : <Mic className="w-6 h-6" />}
                  </button>
                </div>
                <p className="text-sm text-gray-500 text-center">{t.voiceSearch}</p>

                {showFilters && (
                  <div className="mt-6 p-4 bg-gray-50 rounded-xl border-2 border-gray-200">
                    <h3 className="font-bold text-gray-800 mb-4">{t.filters}</h3>
                    <div className="space-y-4">
                      <label className="flex items-center gap-3">
                        <input type="checkbox" checked={filters.available} onChange={(e) => setFilters({...filters, available: e.target.checked})} className="w-5 h-5" />
                        <span>{t.availableNow}</span>
                      </label>
                      <label className="flex items-center gap-3">
                        <input type="checkbox" checked={filters.insurance} onChange={(e) => setFilters({...filters, insurance: e.target.checked})} className="w-5 h-5" />
                        <span>{t.acceptsInsurance}</span>
                      </label>
                      <div className="flex gap-3 pt-2">
                        <button onClick={() => setShowFilters(false)} className="flex-1 bg-blue-600 text-white py-2 rounded-lg font-semibold">{t.applyFilters}</button>
                        <button onClick={() => setFilters({ available: false, maxDistance: 10, minRating: 0, insurance: false })} className="flex-1 bg-gray-200 text-gray-700 py-2 rounded-lg font-semibold">{t.clearFilters}</button>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>

            <div>
              <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center">
                <MapPin className="w-6 h-6 mr-2 text-red-500" />{t.nearbyDoctors}
              </h3>

              {filteredDoctors.length === 0 ? (
                <div className="text-center py-12 bg-white rounded-lg shadow">
                  <AlertCircle className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                  <p className="text-xl text-gray-600">{t.noDoctors}</p>
                </div>
              ) : (
                <div className="grid md:grid-cols-2 gap-6">
                  {filteredDoctors.map((doctor) => (
                    <div key={doctor.id} className="bg-white rounded-xl shadow-lg p-6 border-2 border-transparent hover:border-blue-300">
                      <div className="flex justify-between items-start mb-4">
                        <div>
                          <h4 className="text-xl font-bold text-gray-800">{doctor.name}</h4>
                          <p className="text-blue-600 font-medium">{doctor.specialization}</p>
                        </div>
                        <span className={`px-3 py-1 rounded-full text-sm font-semibold ${doctor.available ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'}`}>
                          {doctor.available ? '‚óè Available' : '‚óã Busy'}
                        </span>
                      </div>

                      <div className="space-y-2 mb-4 text-sm">
                        <div className="flex items-center text-gray-600">
                          <Calendar className="w-4 h-4 mr-2" />{t.experience}: {doctor.experience}
                        </div>
                        <div className="flex items-center text-gray-600">
                          <Star className="w-4 h-4 mr-2 fill-yellow-400 text-yellow-400" />{t.rating}: {doctor.rating}/5 ({doctor.reviewCount})
                        </div>
                        <div className="flex items-center text-gray-600">
                          <MapPin className="w-4 h-4 mr-2 text-red-500" />{doctor.distance} km
                        </div>
                        {doctor.insurance && <div className="flex items-center text-green-600"><Shield className="w-4 h-4 mr-2" />Insurance OK</div>}
                        <div className="text-gray-800 font-bold">{t.consultationFee}: ‚Çπ{doctor.fee}</div>
                      </div>

                      <div className="grid grid-cols-4 gap-2">
                        <button onClick={() => setSelectedDoctor(doctor)} className="col-span-2 bg-blue-600 text-white py-2 rounded-lg font-semibold hover:bg-blue-700 text-sm">
                          <Calendar className="inline w-4 h-4 mr-1" />{t.bookNow}
                        </button>
                        <button className="bg-green-500 text-white py-2 rounded-lg hover:bg-green-600">
                          <Video className="w-4 h-4 mx-auto" />
                        </button>
                        <button onClick={() => { setSelectedDoctor(doctor); setShowChat(true); setChatMessages([{ type: 'doctor', text: `Hello! Dr. ${doctor.name} here. How can I help?` }]); }} className="bg-purple-500 text-white py-2 rounded-lg hover:bg-purple-600">
                          <MessageCircle className="w-4 h-4 mx-auto" />
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </>
        ) : (
          <div className="max-w-4xl mx-auto">
            <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
              <h3 className="text-2xl font-bold text-gray-800 mb-6 text-center">{t.uploadPrescription}</h3>
              <label className="flex flex-col items-center justify-center w-full h-64 border-4 border-dashed border-blue-300 rounded-xl cursor-pointer bg-blue-50 hover:bg-blue-100">
                <Upload className="w-16 h-16 text-blue-500 mb-4" />
                <p className="text-lg text-gray-600 mb-2">Click to upload prescription</p>
                <p className="text-sm text-gray-500">JPG, PNG or PDF</p>
                <input type="file" className="hidden" accept="image/*,.pdf" onChange={handlePrescriptionUpload} />
              </label>
              {prescriptionFile && (
                <div className="mt-4 p-4 bg-green-50 rounded-lg flex items-center">
                  <CheckCircle className="w-6 h-6 text-green-600 mr-3" />
                  <span className="text-green-700 font-medium">{t.uploadSuccess}</span>
                </div>
              )}
            </div>

            {parsedMedicine && (
              <div className="bg-white rounded-2xl shadow-xl p-8">
                <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center">
                  <Pill className="w-8 h-8 mr-3 text-purple-600" />{t.medicineTiming}
                </h3>
                <div className="space-y-6">
                  {parsedMedicine.medicines.map((med, i) => (
                    <div key={i} className="border-2 border-gray-200 rounded-xl p-6">
                      <div className="flex justify-between items-start mb-4">
                        <h4 className="text-xl font-bold text-gray-800">{med.name}</h4>
                        <span className="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm font-semibold">{med.duration}</span>
                      </div>
                      <div className="grid grid-cols-4 gap-3 mb-4">
                        {['morning', 'afternoon', 'evening', 'night'].map((time) => (
                          <div key={time} className={`p-4 rounded-lg text-center ${med.timing.includes(time) ? 'bg-green-500 text-white' : 'bg-gray-100 text-gray-400'}`}>
                            <Clock className="w-6 h-6 mx-auto mb-2" />
                            <p className="text-sm font-semibold">{t[time]}</p>
                          </div>
                        ))}
                      </div>
                      <div className="bg-yellow-50 border-2 border-yellow-200 rounded-lg p-4">
                        <p className="text-center font-semibold text-yellow-800">{t.afterMeal}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      {selectedDoctor && !showChat && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl p-8 max-w-md w-full shadow-2xl">
            <h3 className="text-2xl font-bold text-gray-800 mb-4">Book Appointment</h3>
            <p className="text-gray-600 mb-6">Booking with <strong>{selectedDoctor.name}</strong></p>
            <div className="space-y-4 mb-6">
              <button className="w-full bg-green-500 text-white py-3 rounded-lg font-semibold hover:bg-green-600 flex items-center justify-center">
                <Video className="w-5 h-5 mr-2" />Video Call
              </button>
              <button className="w-full bg-blue-500 text-white py-3 rounded-lg font-semibold hover:bg-blue-600 flex items-center justify-center">
                <Phone className="w-5 h-5 mr-2" />Phone Call
              </button>
              <button className="w-full bg-purple-500 text-white py-3 rounded-lg font-semibold hover:bg-purple-600 flex items-center justify-center">
                <Calendar className="w-5 h-5 mr-2" />Schedule Later
              </button>
            </div>
            <button onClick={() => setSelectedDoctor(null)} className="w-full bg-gray-200 text-gray-700 py-3 rounded-lg font-semibold hover:bg-gray-300">{t.cancel}</button>
          </div>
        </div>
      )}

      {showChat && selectedDoctor && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl w-full max-w-md h-[600px] flex flex-col shadow-2xl">
            <div className="bg-blue-600 text-white p-4 rounded-t-2xl flex justify-between items-center">
              <div>
                <h3 className="font-bold">{selectedDoctor.name}</h3>
                <p className="text-sm">{selectedDoctor.specialization}</p>
              </div>
              <button onClick={() => { setShowChat(false); setSelectedDoctor(null); }} className="text-white hover:bg-blue-700 p-2 rounded">
                <X className="w-6 h-6" />
              </button>
            </div>
            <div className="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50">
              {chatMessages.map((msg, i) => (
                <div key={i} className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                  <div className={`max-w-[70%] p-3 rounded-lg ${msg.type === 'user' ? 'bg-blue-600 text-white' : 'bg-white text-gray-800 shadow'}`}>
                    {msg.text}
                  </div>
                </div>
              ))}
            </div>
            <div className="p-4 border-t bg-white rounded-b-2xl">
              <div className="flex gap-2">
                <input type="text" value={chatInput} onChange={(e) => setChatInput(e.target.value)} onKeyPress={(e) => e.key === 'Enter' && handleChatSend()} placeholder={t.typeMessage} className="flex-1 px-4 py-2 border-2 border-gray-300 rounded-lg outline-none focus:border-blue-500" />
                <button onClick={handleChatSend} className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 font-semibold">
                  <Send className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
